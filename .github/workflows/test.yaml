
name: 'test'
on:
  workflow_dispatch:

env:
  VPC_WORKDIR: vpc
  ECR_WORKDIR: ecr
  RDS_WORKDIR: rds
  EKS_CLUSTER_WORKDIR: eks-cluster
  ADDON_WORKDIR: addon
  KARPENTER_WORKDIR: karpenter
  ARGOCD_WORKDIR: argocd
  MONITORING_WORKDIR : monitoring

jobs:

#####
  terraform_aws_eks_monitoring:
    name: 'Monitoring Deployment'
    # needs: terraform_aws_eks_argocd
    runs-on: ubuntu-latest
    container: genisysdockerhub/terraform

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Monitoring Terraform Init
      run: terraform init --backend-config="./backend/staging.tfvars" --reconfigure
      working-directory: ${{ env.MONITORING_WORKDIR }}

    - name: Monitoring Terraform destroy
      run: terraform destroy --var-file="values/staging.tfvars"   --auto-approve
      working-directory: ${{ env.MONITORING_WORKDIR }}    

 
###ARGOCD
  terraform_aws_eks_argocd:
    name: 'AWS ArgoCD Deployment'
    needs: terraform_aws_eks_monitoring
    runs-on: ubuntu-latest
    container: genisysdockerhub/terraform

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: ArgoCD Terraform Init
      run: terraform init --backend-config="./backend/staging.tfvars" --reconfigure
      working-directory: ${{ env.ARGOCD_WORKDIR }}

    - name: ArgoCD Terraform destroy
      run: terraform destroy --var-file="values/staging.tfvars"   --auto-approve
      working-directory: ${{ env.ARGOCD_WORKDIR }}    


 
###AWS Karpenter
  terraform_aws_eks_karpenter:
    name: 'AWS Karpenter Deployment'
    needs: terraform_aws_eks_argocd
    runs-on: ubuntu-latest
    container: genisysdockerhub/terraform

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: EKS Cluster Addon Terraform Init
      run: terraform init --backend-config="./backend/staging.tfvars" --reconfigure
      working-directory: ${{ env.KARPENTER_WORKDIR }}

    - name: EKS Cluster Addon Terraform destroy
      run: terraform destroy --var-file="values/staging.tfvars"   --auto-approve
      working-directory: ${{ env.KARPENTER_WORKDIR }}




###AWS ADDON
  terraform_aws_eks_addon:
    name: 'AWS EKS Cluster Addon Deployment'
    needs: terraform_aws_eks_karpenter
    runs-on: ubuntu-latest
    container: genisysdockerhub/terraform

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: EKS Cluster Addon Terraform Init
      run: terraform init --backend-config="./backend/staging.tfvars" --reconfigure
      working-directory: ${{ env.ADDON_WORKDIR }}

    - name: EKS Cluster Addon Terraform destroy
      run: terraform destroy --var-file="values/staging.tfvars"   --auto-approve
      working-directory: ${{ env.ADDON_WORKDIR }}



  terraform_aws_eks_cluster:
    name: 'AWS Cluster & NodeGroup Deployment'
    needs: terraform_aws_eks_addon
    runs-on: ubuntu-latest
    container: genisysdockerhub/terraform

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: EKS Cluster Terraform Init
      run: terraform init --backend-config="./backend/staging.tfvars" --reconfigure
      working-directory: ${{ env.EKS_CLUSTER_WORKDIR }}

    - name: EKS Cluster Terraform destroy
      run: terraform destroy --var-file="values/staging.tfvars"   --auto-approve
      working-directory: ${{ env.EKS_CLUSTER_WORKDIR }}


